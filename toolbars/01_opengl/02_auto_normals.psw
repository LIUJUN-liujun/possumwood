{
    "connections": [
        {
            "in_node": "draw_0",
            "in_port": "vertex_data",
            "out_node": "cgal_0",
            "out_port": "vertex_data"
        },
        {
            "in_node": "program_0",
            "in_port": "fragment_shader",
            "out_node": "fragment_shader_0",
            "out_port": "shader"
        },
        {
            "in_node": "cgal_0",
            "in_port": "mesh",
            "out_node": "loader_0",
            "out_port": "polyhedron"
        },
        {
            "in_node": "draw_0",
            "in_port": "program",
            "out_node": "program_0",
            "out_port": "program"
        },
        {
            "in_node": "program_0",
            "in_port": "vertex_shader",
            "out_node": "vertex_shader_0",
            "out_port": "shader"
        }
    ],
    "description": "### Automatic normals\n\nWhen an mesh file doesn't include explicit normals, it is relatively easy to use a fragment shader to \"autogenerate\" normals using screen-space derivatives `dFdx()` and `dFdy()`. This demo shows how to do that in Possumwood - just have a look at `fragment_shared` source.",
    "name": "network",
    "nodes": {
        "cgal_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": -129.781356811523,
                    "y": 463.392761230469
                }
            },
            "name": "cgal",
            "ports": {
                "p_attr_name": "P"
            },
            "type": "render/vertex_data/cgal"
        },
        "draw_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 481.0,
                    "y": 409.0
                }
            },
            "name": "draw",
            "ports": {
                "setup": {
                    "culling": "ccw"
                }
            },
            "type": "render/draw"
        },
        "fragment_shader_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 41.9245948791504,
                    "y": 330.768310546875
                }
            },
            "name": "fragment_shader",
            "ports": {
                "source": "#version 130 \n \nout vec4 color; \n \nin vec3 vertexPosition; \n \nvoid main() { \n\tvec3 dx = dFdx(vertexPosition); \n\tvec3 dy = dFdy(vertexPosition); \n \n\tvec3 norm = normalize(cross(dx, dy));\n\n\tfloat val = abs(norm.z);\n\tcolor = vec4(val, val, val, 1); \n} \n"
            },
            "type": "render/fragment_shader"
        },
        "loader_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": -129.781356811523,
                    "y": 284.785491943359
                }
            },
            "name": "loader",
            "ports": {
                "filename": "$EXAMPLES/stanford_models/bunny.obj",
                "name": "mesh"
            },
            "type": "cgal/loader"
        },
        "program_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 244.0,
                    "y": 260.0
                }
            },
            "name": "program",
            "type": "render/program"
        },
        "vertex_shader_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 52.0786933898926,
                    "y": 204.230606079102
                }
            },
            "name": "vertex_shader",
            "ports": {
                "source": "#version 130 \n\nout vec3 vertexPosition;       // vertex position for the fragment shader \n \nin vec3 P;              // position attr from the vbo \n\nuniform mat4 iProjection;      // projection matrix \nuniform mat4 iModelView;       // modelview matrix \nuniform mat4 iModelViewNormal;\n \n \nvoid main() {\n\tvec4 pos4 = vec4(P.xyz, 1);\n\n\tvertexPosition = (iModelView * pos4).xyz;\n   \tgl_Position = iProjection * iModelView * pos4;\n} \n"
            },
            "type": "render/vertex_shader"
        }
    },
    "scene_config": {
        "end_time": 20.0,
        "fps": 24.0,
        "start_time": 0.0
    },
    "type": "network",
    "ui_geometry": "AdnQywADAAAAAAAAAAAAAAAACf8AAAV3AAAAAAAAABQAAAXlAAACqQAAAAACAAAACgAAAAAAAAAAHAAACf8AAAV3",
    "ui_state": "AAAA/wAAAAD9AAAAAgAAAAAAAAKRAAAEw/wCAAAAAfsAAAAKAGcAcgBhAHAAaAEAAAB6AAAEwwAAAJwBAAADAAAAAQAAAagAAATD/AIAAAAC+wAAABQAcAByAG8AcABlAHIAdABpAGUAcwEAAAB6AAABbwAAAHYBAAAD+wAAAAwAZQBkAGkAdABvAHIBAAAB6gAAA1MAAACuAQAAAwAABcUAAATDAAAABAAAAAQAAAAIAAAACPwAAAABAAAAAgAAAAA="
}